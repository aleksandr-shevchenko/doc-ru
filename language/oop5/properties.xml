<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d73c3dcbd6e2b085781115aa42d17b80ea285b9e Maintainer: irker Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
 <title>Свойства</title>

 <para>
  Переменные, которые являются членами класса, называются <emphasis>свойства</emphasis>.
  Также их называют, используя другие термины, таких как <emphasis>поля</emphasis>,
  но в рамках этой документации,
  мы будем называть их <emphasis>свойствами</emphasis>.
  Они определяются с помощью ключевого слова <literal>public</literal>, <literal>protected</literal>
  или <literal>private</literal>, начиная с PHP 7.4,
  за которым следует необязательное объявление типа, за которым следует обычное объявление переменной.
  Это объявление может содержать инициализацию, но
  эта инициализация должна быть <link linkend="language.constants">постоянным значением</link>.
 </para>
 <para>
  Смотрите <xref linkend="language.oop5.visibility" /> для получения
  информации о применении
  <literal>public</literal>, <literal>protected</literal>,
  и <literal>private</literal>.
 </para>
 <note>
  <para>
   Альтернативный и не рекомендуемый способ объявления свойств класса для обеспечения
   обратной совместимости с PHP 4 - использование ключевого слова <literal>var</literal>.
   Свойство будет обрабатываться так же, как если бы оно было
   объявлено как <literal>public</literal>.
  </para>
 </note>
 <para>
  В пределах методов класса доступ к нестатическим свойствам может быть
  получен с помощью <literal>-&gt;</literal> (объектного оператора):
  <varname>$this-&gt;property</varname> (где <literal>property</literal> - имя свойства).
  Доступ к статическим свойствам осуществляется с помощью <literal>::</literal>
  (двойного двоеточия): <varname>self::$property</varname>. Дополнительную информацию о различии
  статических и нестатических свойств смотрите в разделе
  "<link linkend="language.oop5.static">Ключевое слово static</link>".
 </para>
 <para>
  Псевдопеременная <varname>$this</varname> доступна внутри
  любого метода класса, когда этот метод вызывается из контекста объекта.
  <varname>$this</varname> - значение вызывающего объекта.
 </para>

 <para>
  <example>
   <title>Определение свойств</title>
   <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   public $var1 = 'hello ' . 'world';
   public $var2 = <<<EOD
hello world
EOD;
   public $var3 = 1+2;
   // неправильное определение свойств:
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // правильное определение свойств:
   public $var6 = myConstant;
   public $var7 = [true, false];

   public $var8 = <<<'EOD'
hello world
EOD;
}
?>
]]>
   </programlisting>
  </example>
 </para>

 <note>
  <para>
   Существуют различные функции для обработки классов и объектов.
   Смотрите справочник по <link linkend="ref.classobj">функций для классов/объектов</link>.
  </para>
 </note>

  <sect2 xml:id="language.oop5.properties.typed-properties">
   <title>Объявления типов</title>
   <para>
    Начиная с PHP 7.4.0, определения свойств могут включать <xref linkend="language.types.declarations" />,
    за исключением типа <type>callable</type>.
    <example>
     <title>Пример использования типизированных свойств</title>
     <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
int(1234)
NULL
]]>
     </screen>
    </example>
   </para>

   <para>
    Перед обращением к типизированному свойству у него должно быть задано значение, иначе будет выброшено исключение
    <classname>Error</classname>.
    <example>
     <title>Обращение к свойствам</title>
     <programlisting role="php">
<![CDATA[
<?php

class Shape
{
    public int $numberOfSides;
    public string $name;

    public function setNumberOfSides(int $numberOfSides): void
    {
        $this->numberOfSides = $numberOfSides;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getNumberOfSides(): int
    {
        return $this->numberOfSides;
    }

    public function getName(): string
    {
        return $this->name;
    }
}

$triangle = new Shape();
$triangle->setName("triangle");
$triangle->setNumberofSides(3);
var_dump($triangle->getName());
var_dump($triangle->getNumberOfSides());

$circle = new Shape();
$circle->setName("circle");
var_dump($circle->getName());
var_dump($circle->getNumberOfSides());
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(8) "triangle"
int(3)
string(6) "circle"

Fatal error: Uncaught Error: Typed property Shape::$numberOfSides must not be accessed before initialization
]]>
     </screen>
    </example>
   </para>
  </sect2>

 <sect2 xml:id="language.oop5.properties.readonly-properties">
  <title>Readonly-свойства</title>
  <para>
   Начиная с PHP 8.1.0, свойство можно объявить с помощью модификатора <code>readonly</code>, который предотвращает изменение свойства после инициализации.
   <example>
    <title>Примеры readonly-свойств</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test {
   public readonly string $prop;
   public function __construct(string $prop) {
       // Правильная инициализация.
       $this->prop = $prop;
   }
}

$test = new Test("foobar");
// Правильное чтение.
var_dump($test->prop); // string(6) "foobar"

// Неправильное переопределение. Не имеет значения, что присвоенное значение такое же.
$test->prop = "foobar";
// Ошибка: невозможно изменить readonly-свойство Test::$prop
?>
]]>
    </programlisting>
   </example>
   <note>
    <para>
     Модификатор readonly может применяться только к <link linkend="language.oop5.properties.typed-properties">типизированным свойствам</link>.
     Readonly-свойство без ограничений типа можно создать с помощью типа <xref linkend="language.types.declarations.mixed" />.
    </para>
   </note>
   <note>
    <para>
     Статические readonly-свойства не поддерживаются.
    </para>
   </note>
  </para>
  <para>
   Readonly-свойство можно инициализировать только один раз и только из области, в которой оно было объявлено.
   Любое другое присвоение или изменение свойства приведёт к исключению <classname>Error</classname>.
   <example>
    <title>Неправильная инициализация readonly-свойств</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test1 {
    public readonly string $prop;
}

$test1 = new Test1;
// Неправильная инициализация за пределами закрытой области.
$test1->prop = "foobar";
// Ошибка: не удаётся инициализировать readonly-свойство Test1::$prop из глобальной области
?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <para>
    Указание явного значения по умолчанию для readonly-свойств не допускается, потому что readonly-свойство со значением по умолчанию, по сути, то же самое, что и константа и поэтому не особенно полезно.
    <example>
     <programlisting role="php">
<![CDATA[
<?php
class Test {
    // Ошибка: у readonly-свойства Test::$prop не может быть значения по умолчанию
    public readonly int $prop = 42;
}
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>
  <note>
   <para>
    Readonly-свойства не могут быть уничтожены с помощью <function>unset</function> после их инициализации.
    Однако можно уничтожить readonly-свойство до инициализации из области, в которой было объявлено свойство.
   </para>
  </note>
  <para>
   Модификации не обязательно являются простыми присвоениями, всё перечисленное ниже также приведёт к исключению <classname>Error</classname>:
   <example>
    <programlisting role="php">
<![CDATA[
<?php
class Test {
    public function __construct(
        public readonly int $i = 0,
        public readonly array $ary = [],
    ) {}
}

$test = new Test;
$test->i += 1;
$test->i++;
++$test->i;
$test->ary[] = 1;
$test->ary[0][] = 1;
$ref =& $test->i;
$test->i =& $ref;
byRef($test->i);
foreach ($test as &$prop);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Однако readonly-свойства не исключают внутренней изменчивости. Объекты (или ресурсы), хранящиеся в readonly-свойствах по-прежнему могут быть изменены внутри:
   <example>
    <programlisting role="php">
<![CDATA[
<?php
class Test {
    public function __construct(public readonly object $obj) {}
}

$test = new Test(new stdClass);
// Правильное внутреннее изменение.
$test->obj->foo = 1;
// Неправильное переопределение.
$test->obj = new stdClass;
?>
]]>
    </programlisting>
   </example>
  </para>
 </sect2>

</sect1>
 <!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
